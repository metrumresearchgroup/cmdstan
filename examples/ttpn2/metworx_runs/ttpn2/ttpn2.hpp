// Code generated by Stan version 2.23.0

#include <stan/model/model_header.hpp>

namespace ttpn2_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "examples/ttpn2/ttpn2.stan");
    reader.add_event(126, 124, "end", "examples/ttpn2/ttpn2.stan");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
oneCptPNODE(const T0__& t,
                const std::vector<T1__>& x,
                const std::vector<T2__>& parms,
                const std::vector<T3__>& rdummy,
                const std::vector<int>& idummy, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 8;
        validate_non_negative_index("dxdt", "3", 3);
        std::vector<local_scalar_t__  > dxdt(3, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(dxdt, DUMMY_VAR__);
        stan::math::fill(dxdt, DUMMY_VAR__);

        current_statement_begin__ = 9;
        local_scalar_t__ CL(DUMMY_VAR__);
        (void) CL;  // dummy to suppress unused var warning
        stan::math::initialize(CL, DUMMY_VAR__);
        stan::math::fill(CL, DUMMY_VAR__);
        stan::math::assign(CL,get_base1(parms, 1, "parms", 1));

        current_statement_begin__ = 10;
        local_scalar_t__ V(DUMMY_VAR__);
        (void) V;  // dummy to suppress unused var warning
        stan::math::initialize(V, DUMMY_VAR__);
        stan::math::fill(V, DUMMY_VAR__);
        stan::math::assign(V,get_base1(parms, 2, "parms", 1));

        current_statement_begin__ = 11;
        local_scalar_t__ ke0(DUMMY_VAR__);
        (void) ke0;  // dummy to suppress unused var warning
        stan::math::initialize(ke0, DUMMY_VAR__);
        stan::math::fill(ke0, DUMMY_VAR__);
        stan::math::assign(ke0,get_base1(parms, 3, "parms", 1));

        current_statement_begin__ = 12;
        local_scalar_t__ alpha(DUMMY_VAR__);
        (void) alpha;  // dummy to suppress unused var warning
        stan::math::initialize(alpha, DUMMY_VAR__);
        stan::math::fill(alpha, DUMMY_VAR__);
        stan::math::assign(alpha,get_base1(parms, 4, "parms", 1));

        current_statement_begin__ = 13;
        local_scalar_t__ beta(DUMMY_VAR__);
        (void) beta;  // dummy to suppress unused var warning
        stan::math::initialize(beta, DUMMY_VAR__);
        stan::math::fill(beta, DUMMY_VAR__);
        stan::math::assign(beta,get_base1(parms, 5, "parms", 1));

        current_statement_begin__ = 14;
        local_scalar_t__ Edrug(DUMMY_VAR__);
        (void) Edrug;  // dummy to suppress unused var warning
        stan::math::initialize(Edrug, DUMMY_VAR__);
        stan::math::fill(Edrug, DUMMY_VAR__);

        current_statement_begin__ = 15;
        local_scalar_t__ hazard(DUMMY_VAR__);
        (void) hazard;  // dummy to suppress unused var warning
        stan::math::initialize(hazard, DUMMY_VAR__);
        stan::math::fill(hazard, DUMMY_VAR__);


        current_statement_begin__ = 17;
        stan::model::assign(dxdt, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    (-((CL / V)) * get_base1(x, 1, "x", 1)), 
                    "assigning variable dxdt");
        current_statement_begin__ = 18;
        stan::model::assign(dxdt, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    (ke0 * ((get_base1(x, 1, "x", 1) / V) - get_base1(x, 2, "x", 1))), 
                    "assigning variable dxdt");
        current_statement_begin__ = 19;
        stan::math::assign(Edrug, (alpha * get_base1(x, 2, "x", 1)));
        current_statement_begin__ = 20;
        if (as_bool(logical_eq(t, 0))) {

            current_statement_begin__ = 21;
            stan::math::assign(hazard, 0);
        } else {

            current_statement_begin__ = 23;
            stan::math::assign(hazard, ((beta * pow(Edrug, beta)) * pow(t, (beta - 1))));
        }
        current_statement_begin__ = 25;
        stan::model::assign(dxdt, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    hazard, 
                    "assigning variable dxdt");
        current_statement_begin__ = 27;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dxdt);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct oneCptPNODE_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const T0__& t,
                const std::vector<T1__>& x,
                const std::vector<T2__>& parms,
                const std::vector<T3__>& rdummy,
                const std::vector<int>& idummy, std::ostream* pstream__) const {
        return oneCptPNODE(t, x, parms, rdummy, idummy, pstream__);
    }
};

class ttpn2_model
  : public stan::model::model_base_crtp<ttpn2_model> {
private:
        int nId;
        int nt;
        int nPNObs;
        int nPNCens;
        std::vector<int> iPNObs;
        std::vector<int> iPNCens;
        std::vector<double> amt;
        std::vector<double> rate;
        std::vector<double> ii;
        std::vector<int> addl;
        std::vector<int> cmt;
        std::vector<int> evid;
        std::vector<int> start;
        std::vector<int> end;
        std::vector<double> time;
        std::vector<double> CL;
        std::vector<double> V;
        std::vector<int> ss;
        int nCmt;
        std::vector<double> F;
        std::vector<double> tLag;
        int ntPred;
        double dt;
        std::vector<double> tPred;
        std::vector<double> ratePred;
        std::vector<double> iiPred;
        std::vector<int> addlPred;
        std::vector<int> cmtPred;
        std::vector<int> evidPred;
        std::vector<int> ssPred;
public:
    ttpn2_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    ttpn2_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "ttpn2_model_namespace::ttpn2_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "nId", "int", context__.to_vec());
            nId = int(0);
            vals_i__ = context__.vals_i("nId");
            pos__ = 0;
            nId = vals_i__[pos__++];
            check_greater_or_equal(function__, "nId", nId, 1);

            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            check_greater_or_equal(function__, "nt", nt, 1);

            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "nPNObs", "int", context__.to_vec());
            nPNObs = int(0);
            vals_i__ = context__.vals_i("nPNObs");
            pos__ = 0;
            nPNObs = vals_i__[pos__++];
            check_greater_or_equal(function__, "nPNObs", nPNObs, 1);

            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "nPNCens", "int", context__.to_vec());
            nPNCens = int(0);
            vals_i__ = context__.vals_i("nPNCens");
            pos__ = 0;
            nPNCens = vals_i__[pos__++];
            check_greater_or_equal(function__, "nPNCens", nPNCens, 1);

            current_statement_begin__ = 37;
            validate_non_negative_index("iPNObs", "nPNObs", nPNObs);
            context__.validate_dims("data initialization", "iPNObs", "int", context__.to_vec(nPNObs));
            iPNObs = std::vector<int>(nPNObs, int(0));
            vals_i__ = context__.vals_i("iPNObs");
            pos__ = 0;
            size_t iPNObs_k_0_max__ = nPNObs;
            for (size_t k_0__ = 0; k_0__ < iPNObs_k_0_max__; ++k_0__) {
                iPNObs[k_0__] = vals_i__[pos__++];
            }
            size_t iPNObs_i_0_max__ = nPNObs;
            for (size_t i_0__ = 0; i_0__ < iPNObs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "iPNObs[i_0__]", iPNObs[i_0__], 1);
            }

            current_statement_begin__ = 38;
            validate_non_negative_index("iPNCens", "nPNCens", nPNCens);
            context__.validate_dims("data initialization", "iPNCens", "int", context__.to_vec(nPNCens));
            iPNCens = std::vector<int>(nPNCens, int(0));
            vals_i__ = context__.vals_i("iPNCens");
            pos__ = 0;
            size_t iPNCens_k_0_max__ = nPNCens;
            for (size_t k_0__ = 0; k_0__ < iPNCens_k_0_max__; ++k_0__) {
                iPNCens[k_0__] = vals_i__[pos__++];
            }
            size_t iPNCens_i_0_max__ = nPNCens;
            for (size_t i_0__ = 0; i_0__ < iPNCens_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "iPNCens[i_0__]", iPNCens[i_0__], 1);
            }

            current_statement_begin__ = 39;
            validate_non_negative_index("amt", "nt", nt);
            context__.validate_dims("data initialization", "amt", "double", context__.to_vec(nt));
            amt = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("amt");
            pos__ = 0;
            size_t amt_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < amt_k_0_max__; ++k_0__) {
                amt[k_0__] = vals_r__[pos__++];
            }
            size_t amt_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < amt_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "amt[i_0__]", amt[i_0__], 0);
            }

            current_statement_begin__ = 40;
            validate_non_negative_index("rate", "nt", nt);
            context__.validate_dims("data initialization", "rate", "double", context__.to_vec(nt));
            rate = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("rate");
            pos__ = 0;
            size_t rate_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < rate_k_0_max__; ++k_0__) {
                rate[k_0__] = vals_r__[pos__++];
            }
            size_t rate_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < rate_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "rate[i_0__]", rate[i_0__], 0);
            }

            current_statement_begin__ = 41;
            validate_non_negative_index("ii", "nt", nt);
            context__.validate_dims("data initialization", "ii", "double", context__.to_vec(nt));
            ii = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("ii");
            pos__ = 0;
            size_t ii_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < ii_k_0_max__; ++k_0__) {
                ii[k_0__] = vals_r__[pos__++];
            }
            size_t ii_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < ii_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ii[i_0__]", ii[i_0__], 0);
            }

            current_statement_begin__ = 42;
            validate_non_negative_index("addl", "nt", nt);
            context__.validate_dims("data initialization", "addl", "int", context__.to_vec(nt));
            addl = std::vector<int>(nt, int(0));
            vals_i__ = context__.vals_i("addl");
            pos__ = 0;
            size_t addl_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < addl_k_0_max__; ++k_0__) {
                addl[k_0__] = vals_i__[pos__++];
            }
            size_t addl_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < addl_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "addl[i_0__]", addl[i_0__], 0);
            }

            current_statement_begin__ = 43;
            validate_non_negative_index("cmt", "nt", nt);
            context__.validate_dims("data initialization", "cmt", "int", context__.to_vec(nt));
            cmt = std::vector<int>(nt, int(0));
            vals_i__ = context__.vals_i("cmt");
            pos__ = 0;
            size_t cmt_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < cmt_k_0_max__; ++k_0__) {
                cmt[k_0__] = vals_i__[pos__++];
            }
            size_t cmt_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < cmt_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cmt[i_0__]", cmt[i_0__], 1);
            }

            current_statement_begin__ = 44;
            validate_non_negative_index("evid", "nt", nt);
            context__.validate_dims("data initialization", "evid", "int", context__.to_vec(nt));
            evid = std::vector<int>(nt, int(0));
            vals_i__ = context__.vals_i("evid");
            pos__ = 0;
            size_t evid_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < evid_k_0_max__; ++k_0__) {
                evid[k_0__] = vals_i__[pos__++];
            }
            size_t evid_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < evid_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "evid[i_0__]", evid[i_0__], 0);
            }

            current_statement_begin__ = 45;
            validate_non_negative_index("start", "nId", nId);
            context__.validate_dims("data initialization", "start", "int", context__.to_vec(nId));
            start = std::vector<int>(nId, int(0));
            vals_i__ = context__.vals_i("start");
            pos__ = 0;
            size_t start_k_0_max__ = nId;
            for (size_t k_0__ = 0; k_0__ < start_k_0_max__; ++k_0__) {
                start[k_0__] = vals_i__[pos__++];
            }
            size_t start_i_0_max__ = nId;
            for (size_t i_0__ = 0; i_0__ < start_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "start[i_0__]", start[i_0__], 1);
            }

            current_statement_begin__ = 46;
            validate_non_negative_index("end", "nId", nId);
            context__.validate_dims("data initialization", "end", "int", context__.to_vec(nId));
            end = std::vector<int>(nId, int(0));
            vals_i__ = context__.vals_i("end");
            pos__ = 0;
            size_t end_k_0_max__ = nId;
            for (size_t k_0__ = 0; k_0__ < end_k_0_max__; ++k_0__) {
                end[k_0__] = vals_i__[pos__++];
            }
            size_t end_i_0_max__ = nId;
            for (size_t i_0__ = 0; i_0__ < end_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "end[i_0__]", end[i_0__], 1);
            }

            current_statement_begin__ = 47;
            validate_non_negative_index("time", "nt", nt);
            context__.validate_dims("data initialization", "time", "double", context__.to_vec(nt));
            time = std::vector<double>(nt, double(0));
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_k_0_max__ = nt;
            for (size_t k_0__ = 0; k_0__ < time_k_0_max__; ++k_0__) {
                time[k_0__] = vals_r__[pos__++];
            }
            size_t time_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < time_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "time[i_0__]", time[i_0__], 0);
            }

            current_statement_begin__ = 48;
            validate_non_negative_index("CL", "nId", nId);
            context__.validate_dims("data initialization", "CL", "double", context__.to_vec(nId));
            CL = std::vector<double>(nId, double(0));
            vals_r__ = context__.vals_r("CL");
            pos__ = 0;
            size_t CL_k_0_max__ = nId;
            for (size_t k_0__ = 0; k_0__ < CL_k_0_max__; ++k_0__) {
                CL[k_0__] = vals_r__[pos__++];
            }
            size_t CL_i_0_max__ = nId;
            for (size_t i_0__ = 0; i_0__ < CL_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "CL[i_0__]", CL[i_0__], 0);
            }

            current_statement_begin__ = 49;
            validate_non_negative_index("V", "nId", nId);
            context__.validate_dims("data initialization", "V", "double", context__.to_vec(nId));
            V = std::vector<double>(nId, double(0));
            vals_r__ = context__.vals_r("V");
            pos__ = 0;
            size_t V_k_0_max__ = nId;
            for (size_t k_0__ = 0; k_0__ < V_k_0_max__; ++k_0__) {
                V[k_0__] = vals_r__[pos__++];
            }
            size_t V_i_0_max__ = nId;
            for (size_t i_0__ = 0; i_0__ < V_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "V[i_0__]", V[i_0__], 0);
            }


            // initialize transformed data variables
            current_statement_begin__ = 53;
            validate_non_negative_index("ss", "nt", nt);
            ss = std::vector<int>(nt, int(0));
            stan::math::fill(ss, std::numeric_limits<int>::min());
            stan::math::assign(ss,rep_array(0, nt));

            current_statement_begin__ = 54;
            nCmt = int(0);
            stan::math::fill(nCmt, std::numeric_limits<int>::min());
            stan::math::assign(nCmt,3);

            current_statement_begin__ = 55;
            validate_non_negative_index("F", "nCmt", nCmt);
            F = std::vector<double>(nCmt, double(0));
            stan::math::fill(F, DUMMY_VAR__);
            stan::math::assign(F,rep_array(1.0, nCmt));

            current_statement_begin__ = 56;
            validate_non_negative_index("tLag", "nCmt", nCmt);
            tLag = std::vector<double>(nCmt, double(0));
            stan::math::fill(tLag, DUMMY_VAR__);
            stan::math::assign(tLag,rep_array(0.0, nCmt));

            current_statement_begin__ = 58;
            ntPred = int(0);
            stan::math::fill(ntPred, std::numeric_limits<int>::min());
            stan::math::assign(ntPred,253);

            current_statement_begin__ = 59;
            dt = double(0);
            stan::math::fill(dt, DUMMY_VAR__);
            stan::math::assign(dt,12);

            current_statement_begin__ = 60;
            validate_non_negative_index("tPred", "ntPred", ntPred);
            tPred = std::vector<double>(ntPred, double(0));
            stan::math::fill(tPred, DUMMY_VAR__);

            current_statement_begin__ = 61;
            validate_non_negative_index("ratePred", "ntPred", ntPred);
            ratePred = std::vector<double>(ntPred, double(0));
            stan::math::fill(ratePred, DUMMY_VAR__);
            stan::math::assign(ratePred,rep_array(0.0, ntPred));

            current_statement_begin__ = 62;
            validate_non_negative_index("iiPred", "ntPred", ntPred);
            iiPred = std::vector<double>(ntPred, double(0));
            stan::math::fill(iiPred, DUMMY_VAR__);

            current_statement_begin__ = 63;
            validate_non_negative_index("addlPred", "ntPred", ntPred);
            addlPred = std::vector<int>(ntPred, int(0));
            stan::math::fill(addlPred, std::numeric_limits<int>::min());

            current_statement_begin__ = 64;
            validate_non_negative_index("cmtPred", "ntPred", ntPred);
            cmtPred = std::vector<int>(ntPred, int(0));
            stan::math::fill(cmtPred, std::numeric_limits<int>::min());
            stan::math::assign(cmtPred,rep_array(1, ntPred));

            current_statement_begin__ = 65;
            validate_non_negative_index("evidPred", "ntPred", ntPred);
            evidPred = std::vector<int>(ntPred, int(0));
            stan::math::fill(evidPred, std::numeric_limits<int>::min());

            current_statement_begin__ = 66;
            validate_non_negative_index("ssPred", "ntPred", ntPred);
            ssPred = std::vector<int>(ntPred, int(0));
            stan::math::fill(ssPred, std::numeric_limits<int>::min());
            stan::math::assign(ssPred,rep_array(0, ntPred));

            // execute transformed data statements
            current_statement_begin__ = 68;
            stan::model::assign(iiPred, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        (21 * 24), 
                        "assigning variable iiPred");
            current_statement_begin__ = 69;
            stan::model::assign(iiPred, 
                        stan::model::cons_list(stan::model::index_min_max(2, ntPred), stan::model::nil_index_list()), 
                        rep_array(0.0, (ntPred - 1)), 
                        "assigning variable iiPred");
            current_statement_begin__ = 70;
            stan::model::assign(addlPred, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        5, 
                        "assigning variable addlPred");
            current_statement_begin__ = 71;
            stan::model::assign(addlPred, 
                        stan::model::cons_list(stan::model::index_min_max(2, ntPred), stan::model::nil_index_list()), 
                        rep_array(0, (ntPred - 1)), 
                        "assigning variable addlPred");
            current_statement_begin__ = 72;
            stan::model::assign(evidPred, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable evidPred");
            current_statement_begin__ = 73;
            stan::model::assign(evidPred, 
                        stan::model::cons_list(stan::model::index_min_max(2, ntPred), stan::model::nil_index_list()), 
                        rep_array(0, (ntPred - 1)), 
                        "assigning variable evidPred");
            current_statement_begin__ = 74;
            for (int i = 1; i <= ntPred; ++i) {
                current_statement_begin__ = 74;
                stan::model::assign(tPred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (dt * (i - 1)), 
                            "assigning variable tPred");
            }

            // validate transformed data
            current_statement_begin__ = 53;
            size_t ss_i_0_max__ = nt;
            for (size_t i_0__ = 0; i_0__ < ss_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ss[i_0__]", ss[i_0__], 0);
            }

            current_statement_begin__ = 54;
            check_greater_or_equal(function__, "nCmt", nCmt, 1);


            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 78;
            num_params_r__ += 1;
            current_statement_begin__ = 79;
            num_params_r__ += 1;
            current_statement_begin__ = 80;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~ttpn2_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to suppress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 78;
        if (!(context__.contains_r("ke0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ke0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ke0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "ke0", "double", context__.to_vec());
        double ke0(0);
        ke0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, ke0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ke0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 79;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 80;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta", "double", context__.to_vec());
        double beta(0);
        beta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 78;
            local_scalar_t__ ke0;
            (void) ke0;  // dummy to suppress unused var warning
            if (jacobian__)
                ke0 = in__.scalar_lb_constrain(0, lp__);
            else
                ke0 = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 79;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.scalar_lb_constrain(0, lp__);
            else
                alpha = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 80;
            local_scalar_t__ beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.scalar_lb_constrain(0, lp__);
            else
                beta = in__.scalar_lb_constrain(0);

            // transformed parameters
            current_statement_begin__ = 84;
            validate_non_negative_index("survObs", "nPNObs", nPNObs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> survObs(nPNObs);
            stan::math::initialize(survObs, DUMMY_VAR__);
            stan::math::fill(survObs, DUMMY_VAR__);

            current_statement_begin__ = 85;
            validate_non_negative_index("EdrugObs", "nPNObs", nPNObs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> EdrugObs(nPNObs);
            stan::math::initialize(EdrugObs, DUMMY_VAR__);
            stan::math::fill(EdrugObs, DUMMY_VAR__);

            current_statement_begin__ = 86;
            validate_non_negative_index("hazardObs", "nPNObs", nPNObs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> hazardObs(nPNObs);
            stan::math::initialize(hazardObs, DUMMY_VAR__);
            stan::math::fill(hazardObs, DUMMY_VAR__);

            current_statement_begin__ = 87;
            validate_non_negative_index("survCens", "nPNCens", nPNCens);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> survCens(nPNCens);
            stan::math::initialize(survCens, DUMMY_VAR__);
            stan::math::fill(survCens, DUMMY_VAR__);

            current_statement_begin__ = 88;
            validate_non_negative_index("x", "nt", nt);
            validate_non_negative_index("x", "3", 3);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> x(nt, 3);
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);

            current_statement_begin__ = 89;
            validate_non_negative_index("parms", "5", 5);
            std::vector<local_scalar_t__> parms(5, local_scalar_t__(0));
            stan::math::initialize(parms, DUMMY_VAR__);
            stan::math::fill(parms, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 91;
            for (int j = 1; j <= nId; ++j) {

                current_statement_begin__ = 92;
                stan::math::assign(parms, static_cast<std::vector<local_scalar_t__> >(stan::math::array_builder<local_scalar_t__ >().add(get_base1(CL, j, "CL", 1)).add(get_base1(V, j, "V", 1)).add(ke0).add(alpha).add(beta).array()));
                current_statement_begin__ = 94;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            generalOdeModel_rk45(oneCptPNODE_functor__(), 3, stan::model::rvalue(time, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "time"), stan::model::rvalue(amt, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "amt"), stan::model::rvalue(rate, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "rate"), stan::model::rvalue(ii, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "ii"), stan::model::rvalue(evid, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "evid"), stan::model::rvalue(cmt, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "cmt"), stan::model::rvalue(addl, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "addl"), stan::model::rvalue(ss, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "ss"), parms, F, tLag, 1e-6, 1e-6, 1e8, pstream__), 
                            "assigning variable x");
            }
            current_statement_begin__ = 107;
            for (int i = 1; i <= nPNObs; ++i) {
                current_statement_begin__ = 108;
                stan::model::assign(survObs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::fmax(stan::math::machine_precision(), stan::math::exp(-(get_base1(x, get_base1(iPNObs, i, "iPNObs", 1), 3, "x", 1)))), 
                            "assigning variable survObs");
            }
            current_statement_begin__ = 109;
            stan::math::assign(EdrugObs, multiply(alpha, stan::model::rvalue(x, stan::model::cons_list(stan::model::index_multi(iPNObs), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "x")));
            current_statement_begin__ = 110;
            for (int i = 1; i <= nPNObs; ++i) {
                current_statement_begin__ = 111;
                stan::model::assign(hazardObs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::fmax(stan::math::machine_precision(), ((beta * pow(get_base1(EdrugObs, i, "EdrugObs", 1), beta)) * pow(get_base1(time, get_base1(iPNObs, i, "iPNObs", 1), "time", 1), (beta - 1)))), 
                            "assigning variable hazardObs");
            }
            current_statement_begin__ = 113;
            for (int i = 1; i <= nPNCens; ++i) {
                current_statement_begin__ = 114;
                stan::model::assign(survCens, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::fmax(stan::math::machine_precision(), stan::math::exp(-(get_base1(x, get_base1(iPNCens, i, "iPNCens", 1), 3, "x", 1)))), 
                            "assigning variable survCens");
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 84;
            size_t survObs_j_1_max__ = nPNObs;
            for (size_t j_1__ = 0; j_1__ < survObs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(survObs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: survObs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable survObs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "survObs", survObs, 0);

            current_statement_begin__ = 85;
            size_t EdrugObs_j_1_max__ = nPNObs;
            for (size_t j_1__ = 0; j_1__ < EdrugObs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(EdrugObs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: EdrugObs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable EdrugObs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "EdrugObs", EdrugObs, 0);

            current_statement_begin__ = 86;
            size_t hazardObs_j_1_max__ = nPNObs;
            for (size_t j_1__ = 0; j_1__ < hazardObs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(hazardObs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: hazardObs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable hazardObs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "hazardObs", hazardObs, 0);

            current_statement_begin__ = 87;
            size_t survCens_j_1_max__ = nPNCens;
            for (size_t j_1__ = 0; j_1__ < survCens_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(survCens(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: survCens" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable survCens: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "survCens", survCens, 0);

            current_statement_begin__ = 88;
            size_t x_j_1_max__ = nt;
            size_t x_j_2_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(x(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: x" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable x: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "x", x, 0);

            current_statement_begin__ = 89;
            size_t parms_k_0_max__ = 5;
            for (size_t k_0__ = 0; k_0__ < parms_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(parms[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: parms" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable parms: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t parms_i_0_max__ = 5;
            for (size_t i_0__ = 0; i_0__ < parms_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "parms[i_0__]", parms[i_0__], 0);
            }


            // model body

            current_statement_begin__ = 118;
            lp_accum__.add(normal_log<propto__>(ke0, 0, 0.0005));
            current_statement_begin__ = 119;
            lp_accum__.add(normal_log<propto__>(alpha, 0, 0.000003));
            current_statement_begin__ = 120;
            lp_accum__.add(normal_log<propto__>(beta, 0, 1.5));
            current_statement_begin__ = 122;
            lp_accum__.add(stan::math::log(elt_multiply(hazardObs, survObs)));
            current_statement_begin__ = 123;
            lp_accum__.add(stan::math::log(survCens));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("ke0");
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("survObs");
        names__.push_back("EdrugObs");
        names__.push_back("hazardObs");
        names__.push_back("survCens");
        names__.push_back("x");
        names__.push_back("parms");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nPNObs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nPNObs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nPNObs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nPNCens);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(5);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "ttpn2_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double ke0 = in__.scalar_lb_constrain(0);
        vars__.push_back(ke0);

        double alpha = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha);

        double beta = in__.scalar_lb_constrain(0);
        vars__.push_back(beta);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 84;
            validate_non_negative_index("survObs", "nPNObs", nPNObs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> survObs(nPNObs);
            stan::math::initialize(survObs, DUMMY_VAR__);
            stan::math::fill(survObs, DUMMY_VAR__);

            current_statement_begin__ = 85;
            validate_non_negative_index("EdrugObs", "nPNObs", nPNObs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> EdrugObs(nPNObs);
            stan::math::initialize(EdrugObs, DUMMY_VAR__);
            stan::math::fill(EdrugObs, DUMMY_VAR__);

            current_statement_begin__ = 86;
            validate_non_negative_index("hazardObs", "nPNObs", nPNObs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> hazardObs(nPNObs);
            stan::math::initialize(hazardObs, DUMMY_VAR__);
            stan::math::fill(hazardObs, DUMMY_VAR__);

            current_statement_begin__ = 87;
            validate_non_negative_index("survCens", "nPNCens", nPNCens);
            Eigen::Matrix<double, Eigen::Dynamic, 1> survCens(nPNCens);
            stan::math::initialize(survCens, DUMMY_VAR__);
            stan::math::fill(survCens, DUMMY_VAR__);

            current_statement_begin__ = 88;
            validate_non_negative_index("x", "nt", nt);
            validate_non_negative_index("x", "3", 3);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> x(nt, 3);
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x, DUMMY_VAR__);

            current_statement_begin__ = 89;
            validate_non_negative_index("parms", "5", 5);
            std::vector<double> parms(5, double(0));
            stan::math::initialize(parms, DUMMY_VAR__);
            stan::math::fill(parms, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 91;
            for (int j = 1; j <= nId; ++j) {

                current_statement_begin__ = 92;
                stan::math::assign(parms, static_cast<std::vector<local_scalar_t__> >(stan::math::array_builder<local_scalar_t__ >().add(get_base1(CL, j, "CL", 1)).add(get_base1(V, j, "V", 1)).add(ke0).add(alpha).add(beta).array()));
                current_statement_begin__ = 94;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            generalOdeModel_rk45(oneCptPNODE_functor__(), 3, stan::model::rvalue(time, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "time"), stan::model::rvalue(amt, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "amt"), stan::model::rvalue(rate, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "rate"), stan::model::rvalue(ii, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "ii"), stan::model::rvalue(evid, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "evid"), stan::model::rvalue(cmt, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "cmt"), stan::model::rvalue(addl, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "addl"), stan::model::rvalue(ss, stan::model::cons_list(stan::model::index_min_max(get_base1(start, j, "start", 1), get_base1(end, j, "end", 1)), stan::model::nil_index_list()), "ss"), parms, F, tLag, 1e-6, 1e-6, 1e8, pstream__), 
                            "assigning variable x");
            }
            current_statement_begin__ = 107;
            for (int i = 1; i <= nPNObs; ++i) {
                current_statement_begin__ = 108;
                stan::model::assign(survObs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::fmax(stan::math::machine_precision(), stan::math::exp(-(get_base1(x, get_base1(iPNObs, i, "iPNObs", 1), 3, "x", 1)))), 
                            "assigning variable survObs");
            }
            current_statement_begin__ = 109;
            stan::math::assign(EdrugObs, multiply(alpha, stan::model::rvalue(x, stan::model::cons_list(stan::model::index_multi(iPNObs), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "x")));
            current_statement_begin__ = 110;
            for (int i = 1; i <= nPNObs; ++i) {
                current_statement_begin__ = 111;
                stan::model::assign(hazardObs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::fmax(stan::math::machine_precision(), ((beta * pow(get_base1(EdrugObs, i, "EdrugObs", 1), beta)) * pow(get_base1(time, get_base1(iPNObs, i, "iPNObs", 1), "time", 1), (beta - 1)))), 
                            "assigning variable hazardObs");
            }
            current_statement_begin__ = 113;
            for (int i = 1; i <= nPNCens; ++i) {
                current_statement_begin__ = 114;
                stan::model::assign(survCens, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::fmax(stan::math::machine_precision(), stan::math::exp(-(get_base1(x, get_base1(iPNCens, i, "iPNCens", 1), 3, "x", 1)))), 
                            "assigning variable survCens");
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 84;
            check_greater_or_equal(function__, "survObs", survObs, 0);

            current_statement_begin__ = 85;
            check_greater_or_equal(function__, "EdrugObs", EdrugObs, 0);

            current_statement_begin__ = 86;
            check_greater_or_equal(function__, "hazardObs", hazardObs, 0);

            current_statement_begin__ = 87;
            check_greater_or_equal(function__, "survCens", survCens, 0);

            current_statement_begin__ = 88;
            check_greater_or_equal(function__, "x", x, 0);

            current_statement_begin__ = 89;
            size_t parms_i_0_max__ = 5;
            for (size_t i_0__ = 0; i_0__ < parms_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "parms[i_0__]", parms[i_0__], 0);
            }

            // write transformed parameters
            if (include_tparams__) {
                size_t survObs_j_1_max__ = nPNObs;
                for (size_t j_1__ = 0; j_1__ < survObs_j_1_max__; ++j_1__) {
                    vars__.push_back(survObs(j_1__));
                }
                size_t EdrugObs_j_1_max__ = nPNObs;
                for (size_t j_1__ = 0; j_1__ < EdrugObs_j_1_max__; ++j_1__) {
                    vars__.push_back(EdrugObs(j_1__));
                }
                size_t hazardObs_j_1_max__ = nPNObs;
                for (size_t j_1__ = 0; j_1__ < hazardObs_j_1_max__; ++j_1__) {
                    vars__.push_back(hazardObs(j_1__));
                }
                size_t survCens_j_1_max__ = nPNCens;
                for (size_t j_1__ = 0; j_1__ < survCens_j_1_max__; ++j_1__) {
                    vars__.push_back(survCens(j_1__));
                }
                size_t x_j_2_max__ = 3;
                size_t x_j_1_max__ = nt;
                for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                        vars__.push_back(x(j_1__, j_2__));
                    }
                }
                size_t parms_k_0_max__ = 5;
                for (size_t k_0__ = 0; k_0__ < parms_k_0_max__; ++k_0__) {
                    vars__.push_back(parms[k_0__]);
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "ttpn2_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "ke0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t survObs_j_1_max__ = nPNObs;
            for (size_t j_1__ = 0; j_1__ < survObs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "survObs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t EdrugObs_j_1_max__ = nPNObs;
            for (size_t j_1__ = 0; j_1__ < EdrugObs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "EdrugObs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t hazardObs_j_1_max__ = nPNObs;
            for (size_t j_1__ = 0; j_1__ < hazardObs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "hazardObs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t survCens_j_1_max__ = nPNCens;
            for (size_t j_1__ = 0; j_1__ < survCens_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "survCens" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t x_j_2_max__ = 3;
            size_t x_j_1_max__ = nt;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t parms_k_0_max__ = 5;
            for (size_t k_0__ = 0; k_0__ < parms_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "parms" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "ke0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t survObs_j_1_max__ = nPNObs;
            for (size_t j_1__ = 0; j_1__ < survObs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "survObs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t EdrugObs_j_1_max__ = nPNObs;
            for (size_t j_1__ = 0; j_1__ < EdrugObs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "EdrugObs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t hazardObs_j_1_max__ = nPNObs;
            for (size_t j_1__ = 0; j_1__ < hazardObs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "hazardObs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t survCens_j_1_max__ = nPNCens;
            for (size_t j_1__ = 0; j_1__ < survCens_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "survCens" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t x_j_2_max__ = 3;
            size_t x_j_1_max__ = nt;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t parms_k_0_max__ = 5;
            for (size_t k_0__ = 0; k_0__ < parms_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "parms" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef ttpn2_model_namespace::ttpn2_model stan_model;

#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif

namespace torsten {
namespace dsolve {
    template<typename... Args>
    inline auto pmx_ode_group_mpi_functor::operator()(Args&&... args) const {
        dummy_functor f; return f(std::forward<Args>(args)...);
    }

}
}
